from java.io import File
from java.io import FileOutputStream
from java.util import Collections
import getopt
import sys
import socket
import datetime
import time as pytime


allSubsystems=['general', 'channel', 'jmsruntime', 'jmsserver', 'datasource']

header = {}
data = {}
    
allSubsystemsId={}
allSubsystemsId['general']=[1]
allSubsystemsId['channel']=[2]
allSubsystemsId['jmsruntime']=[3]
allSubsystemsId['jmsserver']=[4]
allSubsystemsId['datasource']=[5]

def collectWLSdata(subsystems=[]):
    #
    seletedIds = getSelectedIds(subsystems)
    #
    global header
    global data
    #
    header = {}
    data = {}
    for id in range(len(allSubsystemsId)+1):    
        data[id] = {}
    #
    cd('/')
    domain = domainRuntime()
    cd('ServerRuntimes')
    servers = domainRuntimeService.getServerRuntimes()
    #
    if (len(servers) > 0):
        for server in servers:
            serverName = server.getName() 
            ####
            ####
            ####            
            if 1 in seletedIds:
                cd ('/ServerRuntimes/' + serverName )
                server=cmo
                cd ('/ServerRuntimes/' + server.getName() + '/JVMRuntime/'  + server.getName())
                jvm=cmo
                cd ('/ServerRuntimes/' + server.getName() + '/ThreadPoolRuntime/ThreadPoolRuntime')
                thread=cmo
                #
                header[1] = addtoCSV([
                'domain', 'serverName', 'subsystem', 
                'sockets_open', 'sockets_opened',
                'heap_size', 'heap_size_max', 'heap_free', 'heap_free_pct', 'jvm_uptime',
                'thread_total', 'thread_idle', 'thread_hogging', 'thread_standby',
                'request_queue', 'request_pending', 'request_completed', 'request_troughput'
                ])
                #
                data[1][serverName] = addtoCSV([
                domain.getName(), server.getName(), 'general',
                str(server.getOpenSocketsCurrentCount()), str(server.getSocketsOpenedTotalCount()),
                str(jvm.getHeapSizeCurrent()), 'n/a', str(jvm.getHeapFreeCurrent()), str(jvm.getHeapFreePercent()), 'n/a',
                str(thread.getExecuteThreadTotalCount()),str(thread.getExecuteThreadIdleCount()),str(thread.getHoggingThreadCount()),str(thread.getStandbyThreadCount()),
                str(thread.getQueueLength()), str(thread.getPendingUserRequestCount()), str(thread.getCompletedRequestCount()), str(thread.getThroughput())
                ])
            ####
            ####
            ####
            cd ('/ServerRuntimes/' + server.getName() + '/ServerChannelRuntimes');
            if 2 in seletedIds:
                header[2] = addtoCSV([
                'domain', 'serverName', 'subsystem', 'channelName', 
                'accepts', 'bytesReceived', 'byteSent', 'connections', 'msgReceived', 'msgSent'
                ])
                data[2][serverName] = {}
                for channel in ['http','iiop','ldap','t3']:   
                    cd ('Default[' + str(channel) + ']');
                    data[2][serverName][channel] = addtoCSV([
                    domain.getName(), server.getName(), 'channel', channel,
                    str(cmo.getChannelName()),
                    str(cmo.getAcceptCount()),
                    str(cmo.getBytesReceivedCount()),
                    str(cmo.getBytesSentCount()),
                    str(cmo.getConnectionsCount()),
                    str(cmo.getMessagesReceivedCount()) ,
                    str(cmo.getMessagesSentCount())
                    ])
                    cd('../')
            ####
            ####
            ####
            if 3 in seletedIds:
                header[3] = addtoCSV([
                'domain', 'serverName', 'subsystem',
                'runtimeName', 'connections', 'connectionsHigh', 'connectionsTotal', 'servers', 'serversHigh', 'serversTotal'
                ])
                jmsRuntime = server.getJMSRuntime();
                data[3][serverName] = addtoCSV([
                domain.getName(), server.getName(), 'jmsruntime',
                str(jmsRuntime.getName()), 
                str(jmsRuntime.getConnectionsCurrentCount()), 
                str(jmsRuntime.getConnectionsHighCount()), 
                str(jmsRuntime.getConnectionsTotalCount()),
                str(jmsRuntime.getJMSServersCurrentCount()),
                str(jmsRuntime.getJMSServersHighCount()),
                str(jmsRuntime.getJMSServersTotalCount())
                ])
            ####
            ####
            ####
            if 4 in seletedIds:
                jmsRuntime = server.getJMSRuntime();
                jmsServers = jmsRuntime.getJMSServers();
                header[4] = addtoCSV([
                'domain', 'serverName', 'subsystem', 'jmsServerName',
                'bytes', 'bytesHigh', 'bytesPageable', 'bytesPagedIn', 'bytesPagedOut', 'bytesPending', 
                'bytesReceived', 'bytesThresholdTime'
                ])
                header[4] = header[4] + delimiter + addtoCSV([
                'destinations', 'destinationsHigh', 'destinationsTotal'
                ])
                header[4] = header[4] + delimiter + addtoCSV([
                'messages', 'messagesHigh', 'messagesPageable', 
                'messagesPagedIn', 'messagesPagedOut', 'messagesPending', 
                'messagesReceived', 'messagesThresholdTime'
                ])
                # removed as non numerical info  
                # header[4] = header[4] + delimiter + addtoCSV([
                # 'pending', 'transactions'
                # ])
                header[4] = header[4] + delimiter + addtoCSV([
                'sessionPoolsCurrent', 'sessionPoolsHigh', 'sessionPoolsTotal'
                ])
                data[4][serverName] = {}
                #
                for jmsServer in jmsServers:
                    jmsServerName = jmsServer.getName()
                    #
                    data[4][serverName][jmsServerName] = addtoCSV([
                    domain.getName(), server.getName(), 'jmsserver', jmsServerName,
                    str(jmsServer.getBytesCurrentCount()),
                    str(jmsServer.getBytesHighCount()),
                    str(jmsServer.getBytesPageableCurrentCount()),
                    str(jmsServer.getBytesPagedInTotalCount()),
                    str(jmsServer.getBytesPagedOutTotalCount()),
                    str(jmsServer.getBytesPendingCount()),
                    str(jmsServer.getBytesReceivedCount()),
                    str(jmsServer.getBytesThresholdTime())                
                    ])
                    ####
                    ####
                    ####
                    data[4][serverName][jmsServerName] = data[4][serverName][jmsServerName] + delimiter + addtoCSV([             
                    str(jmsServer.getDestinationsCurrentCount()),
                    str(jmsServer.getDestinationsHighCount()),
                    str(jmsServer.getDestinationsTotalCount())                
                    ])
                    ####
                    ####
                    ####                
                    data[4][serverName][jmsServerName] = data[4][serverName][jmsServerName] + delimiter + addtoCSV([
                    str(jmsServer.getMessagesCurrentCount()),
                    str(jmsServer.getMessagesHighCount()),
                    str(jmsServer.getMessagesPageableCurrentCount()),
                    str(jmsServer.getMessagesPagedInTotalCount()),
                    str(jmsServer.getMessagesPagedOutTotalCount()),
                    str(jmsServer.getMessagesPendingCount()),
                    str(jmsServer.getMessagesReceivedCount()),
                    str(jmsServer.getMessagesThresholdTime())                
                    ])
                    ####
                    ####
                    ####             
                    # removed as non numerical info   
                    # data[4][serverName][jmsServerName] = data[4][serverName][jmsServerName] + delimiter + addtoCSV([
                    # str(jmsServer.getPendingTransactions()),
                    # str(jmsServer.getTransactions())
                    # ]) 
                    ####
                    ####
                    ####                
                    data[4][serverName][jmsServerName] = data[4][serverName][jmsServerName] + delimiter + addtoCSV([
                    str(jmsServer.getSessionPoolsCurrentCount()),
                    str(jmsServer.getSessionPoolsHighCount()),
                    str(jmsServer.getSessionPoolsTotalCount())
                    ])
            ####
            ####
            ####
            if 5 in seletedIds:
                header[5] = addtoCSV([
                'domain', 'serverName', 'subsystem', 'dsName',
                'capacity', 'capacityHigh', 'numAvailable', 'numUnavailable',
                'highestNumAvailable', 'highestNumUnavailable', 'activeConnectionsAverage',
                'activeConnectionsCurrent', 'activeConnectionsHigh', 'connectionsTotal',
                'connectionDelayTime', 'leakedConnections'
                ])
                header[5] = header[5] + delimiter + addtoCSV([
                'reserveRequest', 'failedReserveRequest', 'failuresToReconnect', 
                'waitingForConnectionCurrent', 'waitingForConnectionFailureTotal', 'waitingForConnectionHigh', 
                'waitingForConnectionSuccessTotal', 'waitingForConnectionTotal', 'waitSecondsHigh'
                ])
                header[5] = header[5] + delimiter + addtoCSV([
                'prepStmtCacheAccess', 'prepStmtCacheAdd', 'prepStmtCacheCurrentSize',
                'prepStmtCacheDelete', 'prepStmtCacheHit', 'prepStmtCacheMiss'
                ])
                data[5][serverName] = {}
                jdbcRuntime = server.getJDBCServiceRuntime();
                datasources = jdbcRuntime.getJDBCDataSourceRuntimeMBeans();
                for datasource in datasources:
                    dsName = datasource.getName()
                    ####
                    ####
                    ####                
                    data[5][serverName][dsName] = addtoCSV([
                    domain.getName(), server.getName(), 'datasource', dsName,  
                    str(datasource.getCurrCapacity()),
                    str(datasource.getCurrCapacityHighCount()),
                    str(datasource.getNumAvailable()),
                    str(datasource.getNumUnavailable()),
                    str(datasource.getHighestNumAvailable()),
                    str(datasource.getHighestNumUnavailable()),
                    str(datasource.getActiveConnectionsAverageCount()),
                    str(datasource.getActiveConnectionsCurrentCount()),  
                    str(datasource.getActiveConnectionsHighCount()), 
                    str(datasource.getConnectionsTotalCount()), 
                    str(datasource.getConnectionDelayTime()), 
                    str(datasource.getLeakedConnectionCount())
                    ])
                    ####
                    ####
                    ####                
                    data[5][serverName][dsName] = data[5][serverName][dsName] + delimiter + addtoCSV([
                    str(datasource.getReserveRequestCount()),
                    str(datasource.getFailedReserveRequestCount()),
                    str(datasource.getFailuresToReconnectCount()), 
                    str(datasource.getWaitingForConnectionCurrentCount()), 
                    str(datasource.getWaitingForConnectionFailureTotal()), 
                    str(datasource.getWaitingForConnectionHighCount()),  
                    str(datasource.getWaitingForConnectionSuccessTotal()), 
                    str(datasource.getWaitingForConnectionTotal()), 
                    str(datasource.getWaitSecondsHighCount())                 
                    ])
                    ####
                    ####
                    ####                
                    data[5][serverName][dsName] = data[5][serverName][dsName] + delimiter + addtoCSV([  
                    str(datasource.getPrepStmtCacheAccessCount()), 
                    str(datasource.getPrepStmtCacheAddCount()),  
                    str(datasource.getPrepStmtCacheCurrentSize()),  
                    str(datasource.getPrepStmtCacheDeleteCount()),  
                    str(datasource.getPrepStmtCacheHitCount()), 
                    str(datasource.getPrepStmtCacheMissCount()) 
                    ])
#
def addtoCSV(list):
    result = ''
    first=True
    for col in list:
        if not first: result = result + delimiter
        result = result + col
        first=False
    return result
#
def dumpWlsCSV(subsystems=[]):
    #
    if len(subsystems)==0:
        subsystems = allSubsystems
    #    
    for subsystem in subsystems:
        for id in allSubsystemsId[subsystem]:
            if id in data:
                for server in data[id]:
                    if type(data[id][server]) is dict:
                        for row in data[id][server]:
                            if len(subsystems)>1:
                                print '>>>' + str(id) + ':DATA:', 
                            print data[id][server][row]
                    else:
                        if len(subsystems)>1:
                            print '>>>' + str(id) + ':DATA:', 
                        print data[id][server]

                            
#
def getSelectedIds(subsystems=[]):
    #
    if len(subsystems)==0:
        subsystems = allSubsystems
    #
    selectedIds = []
    for subsystem in subsystems:
        for id in allSubsystemsId[subsystem]:
            selectedIds.append(id)
    return selectedIds    
#
def dumpWlsHeadersCSV():
    ids = header.keys()
    ids.sort()
    
    if len(ids) > 1:
        for id in ids:
            print '>>>' + str(id) + ':HEADER:', 
            print header[id]
    else:
        print header[ids[0]]
#
def wlsstat(subsystems=[], count=10, interval=1):
    collectWLSdata(subsystems)
    if not noheader: dumpWlsHeadersCSV()
    dumpWlsCSV(subsystems)
    
    count = count - 1
    while count >0:
      java.lang.Thread.sleep(interval * 1000)
      dumpWlsCSV(subsystems)
      collectWLSdata(subsystems)
      count = count - 1
#
def printRawHeader():
    collectWLSdata()
    dumpWlsHeadersCSV()    
#
def usage():
    # help fusion may inject here anything if necessary
    # description
    output.write("""
Gets WebLogic 11g monitoring information, and dumps CSV columnar format.""")
        
    # help fusion may inject here anything if necessary
    # usage
    output.write("""
usage: wls.sh """)
    
    # help fusion may inject here anything if necessary
    # arguments
    output.write("""
[-s|--server -p|--port] [-u|--url] [-c|--count] [-d|--delay] [--subsystems] [--subsystem]  [--timedelimiter] [--delimiter] [--system] [--source] [--globalheader] [--noheader] [--timestamp] [--notbuffered] [-h|--help]""")

    # help fusion may inject here anything if necessary
    # details
    output.write("""
    --count..........number of DMS data collection cycles. default: 10    
    --delay..........delay between DMS data collection cycles. default: 5
    --subsystems.....list of subsystems to be monitored. Returns multi header CSV format. Options are: general|channel|jmsruntime|jmsserver|datasource|all. default: general
    --subsystem......name of single subsystem to be monitored. Returns calid CSV. Options are: general|channel|jmsruntime|jmsserver|datasource. default: general
    
    --system.........source system name. default: hostname
    --source.........source data name. default: soa_dms
    --timestamp......prefix metrics data with globalheader and timestamp. default: false
    
    --server.........Admin server name used during WLST connect operation. default: AdminServer
    --port...........TCP port used to connect to Admin server. default: 7001
    --url............user specified URL. Will be used as provided
    
    --notbuffered....flush after each std write. To be used in console mode. default: false
    --delimiter......delimiter used in CSV to divide columns. default: comma
  
    --timedelimiter..delimiter between data and time in datetime column. default: space
    --globalheader...header used to prefix composite metric names. default: datetime,timezone,timestamp,system,source
    --noheader.......remove CSV header from output. default=false
    --printrawheader.print raw header as taken from dms and exit. default=false""")
      
    # help fusion may inject here anything if necessary
    # notes
    output.write("""
    Note that:
    1. script requires Oracle SOA to be installed and up, as it's based on SOA DMS metrics. 
    2. uses WLST. 
    3. runs w/o need to authenticate as it's started from domain directory""")

    # help fusion may inject here anything if necessary
    # author
    output.write("""
    ---
    version 0.1
    rstyczynski@gmail.com, https://github.com/rstyczynski/umc""")
    
#
#
# default values
admin_name = 'AdminServer'
admin_address = 'localhost'
admin_port = 7001
admin_protocol = 't3'
admin_url = admin_protocol + "://" + admin_address + ":" + str(admin_port)
monitor_subsystem = 'general'
monitor_subsystems = [monitor_subsystem]
monitor_count = 10
monitor_interval = 5
delimiter = ','
timedelimiter = ' '
system = socket.gethostname()
source = 'wls'
globalheader = 'datetime' + delimiter + 'timezone' + delimiter + 'timestamp' + delimiter + 'system' + delimiter + 'source'
timestamp = false
notbuffered = false
noheader=false
printrawheader=false
#
try:
    opts, args = getopt.getopt( sys.argv[1:], 's:p:u:c:d:h', ['server=','port=','url=', 'count=','delay=','subsystem=','subsystems=','help', 'helpInternal', 'timedelimiter=','delimiter=','system=','source=', 'globalheader=', 'noheader', 'timestamp', 'notbuffered', 'printrawheader'] )
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
	
for opt, arg in opts:
    if opt in ('--help'):
        usage()
        sys.exit(2)
    elif opt in ('-s', '--server'):
        admin_name = arg
    elif opt in ('-p', '--port'):
        admin_port = arg
        admin_url = admin_protocol + "://" + admin_address + ":" + str(admin_port)
    elif opt in ('-u', '--url'):
        admin_url = arg
    elif opt in ('-c', '--count'):
        monitor_count = int(arg)
    elif opt in ('-d', '--delay'):
        monitor_interval = int(arg)
    elif opt in ('--subsystems'):
        if arg == 'all':
            monitor_subsystems = allSubsystems
        else:
            monitor_subsystems = arg.split(',')
    elif opt in ('--subsystem'):
        monitor_subsystems = [subsystem]
    elif opt in ('--timedelimiter'):
        timedelimiter = arg
    elif opt in ('--delimiter'):
        delimiter = arg
        globalheader = 'datetime' + delimiter + 'timezone' + delimiter + 'timestamp' + delimiter + 'system' + delimiter + 'source'
    elif opt in ('--system'):
        system = arg
    elif opt in ('--source'):
        source = arg
    elif opt in ('--globalheader'):
        globalheader = arg
    elif opt in ('--noheader'):
        noheader = true
    elif opt in ('--printrawheader'):
        printrawheader=true
    elif opt in ('--timestamp'):
        timestamp = true
    elif opt in ('--notbuffered'):
        notbuffered = true
        output = Unbuffered(sys.stdout)
    else:
        usage()
        sys.exit(2)

#
connect(url=admin_url, adminServerName=admin_name)

if printrawheader==true:
    printRawHeader()
else:
    wlsstat(monitor_subsystems, monitor_count, monitor_interval)

#
disconnect()
exit()