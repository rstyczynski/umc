#---------------------------------------------------------------------------------------
#--- platform elements 
#---------------------------------------------------------------------------------------

if [ -f $WLS_HOME/bin/setWLSEnv.sh ]; then
  . $WLS_HOME/bin/setWLSEnv.sh >/dev/null
  
  if [ ! -z "$OSB_HOME" ]; then
    #add osb libraries to classpath
    for jar in $OSB_HOME/lib/*.jar;do 
        if [[ ! $CLASSPATH = *"$jar"* ]]; then
            CLASSPATH=$CLASSPATH:$jar
        fi
    done
    for jar in $OSB_HOME/modules/*.jar; do
        if [[ ! $CLASSPATH = *"$jar"* ]]; then
            CLASSPATH=$CLASSPATH:$jar
        fi
    done
  fi
else
  echo "Note: Oracle SOA not configured. Update etc/umc.cfg to be able to use SOA related components of the package."
fi


#---------------------------------------------------------------------------------------
#--- locale - needed for Perl
#---------------------------------------------------------------------------------------
export LANGUAGE="en_US:en"
export LC_ALL="en_US.UTF-8"
export LC_CTYPE="UTF-8"
export LANG="en_US.UTF-8"
  
#---------------------------------------------------------------------------------------
#--- platform version
#---------------------------------------------------------------------------------------

# use in code: cmd_version=$(eval "echo $(echo \$$cmd\_version)"); echo $cmd_version
#              cmd_version_major=$(eval "echo $(echo \$$cmd\_version_major)"); echo $cmd_version_major

#2.6.39-400.109.5.el6uek.x86_64
export linux_version=$(uname -r | cut -d'-' -f1)
export linux_version_major=$(uname -r | cut -d'-' -f1 | cut -d'.' -f1)
export linux_version_minor=$(uname -r | cut -d'-' -f1 | cut -d'.' -f2)
export linux_version_patch=$(uname -r | cut -d'-' -f1 | cut -d'.' -f3)
export linux_version_specific=$(uname -r | cut -d'-' -f2-999)
    
#1.6.0_37, 1.8.0_60
export java_version=$($JAVA_HOME/bin/java -version 2>&1 | grep 'java version'  | cut -d' ' -f3 | tr -d '"')
export java_version_major=$(echo $java_version | cut -f1 -d'_' | cut -d'.' -f1)
export java_version_minor=$(echo $java_version | cut -f1 -d'_' | cut -d'.' -f2)
export java_version_patch=$(echo $java_version | cut -f1 -d'_' | cut -d'.' -f3)
export java_version_specific=$(echo $java_version | cut -f2 -d'_')
    
if [ -f $FMW_HOME/registry.xml ]; then
    #10.3.6.0
    export wls_version=$(cat $FMW_HOME/registry.xml | grep 'component name="WebLogic Server"' | tr ' ' '\n' | grep version | cut -d'=' -f2 | tr -d '"')
    export wls_version_major=$(echo $wls_version | cut -d'.' -f1)
    export wls_version_minor=$(echo $wls_version | cut -d'.' -f2)
    export wls_version_patch=$(echo $wls_version | cut -d'.' -f3)
    export wls_version_specific=$(echo $wls_version | cut -d'.' -f4)
fi

if [ -f $SOA_HOME/bin/soaversion.sh ]; then
    #11.1.1.7.0
    export soa_version=$($SOA_HOME/bin/soaversion.sh | grep "Oracle SOA Server version" | cut -d' ' -f5)
    export soa_version_major=$(echo $soa_version | cut -d'.' -f1)
    export soa_version_minor=$(echo $soa_version | cut -d'.' -f2)
    export soa_version_patch=$(echo $soa_version | cut -d'.' -f3)
    export soa_version_specific=$(echo $soa_version | cut -d'.' -f4-5)
fi

if [ -f $OSB_HOME/OPatch/opatch ]; then
    export osb_version=$($OSB_HOME/OPatch/opatch lsinventory | grep "Oracle Service Bus" | tr -s ' ' | cut -d' ' -f4)
    export osb_version_major=$(echo $osb_version | cut -d'.' -f1)
    export osb_version_minor=$(echo $osb_version | cut -d'.' -f2)
    export osb_version_patch=$(echo $osb_version | cut -d'.' -f3)
    export osb_version_specific=$(echo $osb_version | cut -d'.' -f4-5)
fi


#---------------------------------------------------------------------------------------
#--- tools category
#---------------------------------------------------------------------------------------

export system_type=$(uname -s | tr [A-Z] [a-z])

export vmstat_layer=$system_type
export free_layer=$system_type
export top_layer=$system_type
export uptime_layer=$system_type
export meminfo_layer=$system_type
export tcpext_layer=$system_type
export netstattcp_layer=$system_type
export ifconfig_layer=$system_type
export sockets_layer=$system_type
export iostat_layer=$system_type
export soabindings_layer=soa
export businessservice_layer=osb
export wls_layer=wls
export pingSocket_layer=linux
export df_layer=linux 
export oradb_layer=linux
export apstatus_layer=linux
export accesslog_layer=linux
export sblspm_layer=linux
export dms_layer=linux
export dmsreset_layer=linux
export perflib_layer=linux
export td_layer=linux

#--------------------------------------------------------------------------------------
#--- tools packages
#---------------------------------------------------------------------------------------

# use in code: cmd_version=$(eval "echo $(echo \$$cmd\_version)"); echo $cmd_version

# procps
export vmstat_package=procps/$(vmstat -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
export free_package=procps/$(free -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
export uptime_package=procps/$(uptime -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
export top_version=$(top -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
if [ -z "$top_version" ]; then
    top_version=$(top -v  2>&1 | head -1 | sed 's/[^0-9.]*//g')
fi
export top_package=procps/$top_version

#--files from /proc
meminfo_version=$(uptime -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
export meminfo_package=procps/$meminfo_version
# Note for DirectMap1G: This value will only be available in /proc/meminfo provided the respective CPU hardware supports it. You can verify the same by checking for flag 'pdpe1gb' in /proc/cpuinfo.
grep pdpe1gX /proc/cpuinfo >/dev/null && meminfo_package=$meminfo_package/pdpe1g

export tcpext_package=procps/$(uptime -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')

# net-tools
export netstattcp_package=net-tools/$(netstat -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
export ifconfig_package=net-tools/$(ifconfig -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')
export sockets_package=net-tools/$(netstat -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')

# sysstat
export iostat_package=sysstat/$(iostat -V  2>&1 | head -1 | sed 's/[^0-9.]*//g')

# umc-tools
export pingSocket_package=umc-tools/0.1

# gnu coreutils
export df_package=gnucoreutils/$(df --version | head -1 | sed 's/[^0-9.]*//g')

# oradb package to execute SQL
export oradb_package=oradb/1.0

# Apache status
export apstatus_package=apache/1.0

# access log
export accesslog_package=apache/1.0

# siebel spm
export sblspm_package=soa/1.0

# dms collector
export dms_package=dms/1.0

# dms reset
export dmsreset_package=dms/1.0

# perflib
export perflib_package=perflib/1.0

# perflib
export td_package=td/1.0


