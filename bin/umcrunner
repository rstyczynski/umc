#!/bin/bash
# umcrunner, tomas@vitvar.com, May-June 2018
#
# umcrunner can be used to start, stop and query umc tools. When starting an umc tool, 
# it uses logdirector to write output to log files. There is always a single file where umc tool is 
# pushing the updates from a sensor. The file is roated on pre-defined time interval 
# creating batches of log files. The log files can then be pushed to a remote 
# destination (e.g. a DB) by a third-party script. 

# load libs environment variables and setup umc
source ~/libs/umc-libs-env.sh >/dev/null
source ~/umc/bin/umc.h  >/dev/null

# this script directory
scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# exit this script from within a function
trap "exit 1" TERM
TOP_PID=$$

function print_usage () {
    echo "Runs, stops and queries umc instances running on a single host."
    echo ""
    echo "Usage:"
    echo "  * running an instance of a umc tool and store logs in $UMC_LOG_DIR/<id>:"
    echo "  umcrunner --run <id> <rotate-time> <tool> <delay> <count> [<umc-params>]"
    echo ""
    echo "  where:"
    echo "  id               A unique id of umc tool instance"
    echo "  rotate-time      The time to rotate the umc output log"
    echo "  tool             umc tool id"
    echo "  delay            Delay in seconds between umc tool runs"
    echo "  count            Number of umc tool runs"
    echo "  umc-params       Additional umc tool paramers"
    echo ""
    echo "  * other usages:"
    echo "  umcrunner --help | --stats [--noheader] | --runall <file> [--verbose] | --stopall | --stop <id> | --ls <id>"
    echo ""
    echo "  where:"
    echo "  --help           this help"
    echo "  --stats          displays all running umc instances (see further below what it shows)"
    echo "  --noheader       suppress the header in stats"
    echo "  --runall <file>  runs all umc instances from a definition file <file>"
    echo "  --stopall        stops all running umc instances"
    echo "  --stop <id>      stops an umc instance"
    echo "  --ls <id>        runs 'ls -all' in the umc instance directory"
    echo "  --ps <id>        shows a process hierarchy of the umc instnace"
    echo ""
    echo "  umcrunner --stats displays following detailed information about running umc instances:"
    echo ""
    echo "  GPID             group process ID"
    echo "  UMC_ID           unique umc instance ID"
    echo "  ROTAT_T          roation time in seconds used as a value for logdirector.pl -timeLimit"
    echo "  UMC              umc tool (sensor) id"
    echo "  DELAY            umc tool delay value"
    echo "  COUNT            umc tool count value"
    echo "  PARAMS           additional parameters of umc tool (umc tool specific)"
    echo "  STARTED          time the umc instance was started"
    echo "  RUN_T            umc instance running time"
    echo "  CPU_T            cpu time consumed by the umc instance since its start up"
    echo "  BACKLOG          number of files in a backlog (in a directory $UMC_LOG_DIR/<UMC_ID>)"
}

# --- helper functions ---

# runc umc tool
function umc_run() {
    umc_id="$1" && shift
    tool="$1" && shift
    delay="$1" && shift
    count="$1" && shift
    rotateTime="$1" && shift
    umc_params="$*"

    mkdir -p $UMC_LOG_DIR/$umc_id

    # run umc with logdirector
    # this needs an explicit stdin redirection (tail -f /dev/null) as otherwise the background java process was trying
    # to read from stdin (that somehow got srewed up when in background) and was causing high cpu.
    tail -f /dev/null | umc $tool collect $delay $count $umc_params 2>>$UMC_LOG_DIR/$umc_id/$umc_id.error.out | \
        logdirector.pl -name $umc_id -dir $UMC_LOG_DIR/$umc_id \
            -detectHeader \
            -checkHeaderDups \
            -rotateByTime run \
            -timeLimit $rotateTime \
            -flush \
            -timeRotationInThread \
            -rotateOnThreadEnd &
}

# gets the process group id of the umc instance 
function umc_gpid() {
     umc_id="$1" && shift
     echo $(ps axf -o  "%p %r %y %x %a" | grep -v "grep" | egrep -v "$TOP_PID.+umcrunner" | egrep "umcrunner \-\-run $umc_id " | awk '{print $2}')
}

# same as umc_gpid but echoes error and exits the script when no id is found
function umc_gpid_check () {
    umc_id="$1" && shift
    gpid=$(umc_gpid $umc_id)
    if [ "$gpid" = "" ]; then
        echo >&2 "umc instance with id $umc_id is not running!"
        kill -s TERM $TOP_PID
    else
        echo $gpid
    fi
}

# prints aligned umc stats row
function printstats() {
    echo -n $* | awk -F '::' '{printf "%-7s%-20s%-8s%-15s%-7s%-7s%-17s%-22s%-7s%-10s%-10s\n",
        $1,$2,$3,$4,$5,$6,substr($7, 1, 15),$8,$9,$10,$11,$12,$13}'
}

# checks that the argument $1 is a number and displays an error provided as argument $2
# if the argument $2 is missing, displays a default message
function checkNumber() {
  if ! [[ $1 =~ "^[0-9]+$" ]] ; then
    if [ "$2" = "" ]; then
      echo >&2 "Number expected ($1)!"
    else
      echo >&2 "$2"
    fi
    kill -s TERM $TOP_PID
  fi
}

function checkUMCID() {
  if ! [[ $1 =~ "^[0-9a-zA-Z\\._]+$" ]] ; then
    echo >&2 "The value '$1' is not a valid UMC identifier!"
    kill -s TERM $TOP_PID
  fi  
}

# --- MAIN ---

# if umc log directory is not set, then set it to a default logs directory under umc root
if [ "$UMC_LOG_DIR" = "" ]; then
    UMC_LOG_DIR="$umcRoot/logs"
fi

# the first argument is the command to run
cmd=$1 && shift

# *** run a new umc instance
if [ "$cmd" = "--run" ]; then
    # command parameters
    umc_id=$1 && shift
    rotateTime="$1" && shift
    tool="$1" && shift
    delay="$1" && shift
    count="$1" && shift
    umc_params="$*"
    
    # check parameters
    # check the umc_id is a valid identifier
    checkUMCID $umc_id
    
    # check required numeric parameters are numbers
    checkNumber $rotateTime "Parameter 'rotateTime' must be a number!"
    checkNumber $delay "Parameter 'delay' must be a number!"
    checkNumber $count "Parameter 'count' must be a number!"
    
    # check that the umc tool exists as a sensor
    if [ "$(umc sensors | grep -o $tool)" = "" ]; then
        echo "umc tool $tool does not exist! Run umc sensors to check the tool is available."
        exit 1
    fi

    # check if umc with the same id is already running
    gpid=$(umc_gpid "$umc_id")
    if [ "$gpid" != "" ]; then
        #echo >&2 "umc with id $umc_id is already running (gpid=$gpid)!"
        exit 0
    fi

    # additional security to check the umc instance cannot be running more than once
    cnt=$(ps ax | egrep "umcrunner \-\-run $umc_id " | wc -l)
    if [ $cnt -gt 2 ]; then
        echo >&2 "internal error: umc instance $umc_id is already running!"
        exit 1        
    fi

    # run the umc
    umc_run $umc_id $tool $delay $count $rotateTime $umc_params

    exit 0
fi

# *** stop currently running umc instance
if [ "$cmd" = "--stop" ]; then
    # command parameters
    umc_id=$1 && shift

    gpid=$(umc_gpid "$umc_id")
    if [ "$gpid" = "" ]; then
        echo >&2 "umc with id $umc_id is not running!"
        exit 1
    fi
    kill -- -$gpid

    exit 0
fi

# *** show stats for all umc instances running on this host
if [ "$cmd" = "--stats" ]; then
    # command parameters
    args=$1 && shift

    # print header
    if [ "$args" != "--noheader" ]; then
        printstats "GPID::UMC_ID::ROTA_T::UMC::DELAY::COUNT::PARAMS::STARTED::RUN_T::CPU_T::BACKLOG"
    fi

    # get all instances of umc runner running on this hosts
    ps axf -eo pid,pgid,cmd | egrep "umcrunner \-\-run .+" | grep -v "grep" | \
    while read line; do
        # pid and gpid
        pid=$(echo $line | awk '{print $1}')
        gpid=$(echo $line | awk '{print $2}')

        params=$(echo $line | egrep -o "\-\-run.+")

        # umc instance arguments
        umc_id=$(echo $params | awk '{print $2}')
        time_int=$(echo $params | awk '{print $3}')
        umc_tool=$(echo $params | awk '{print $4}')
        umc_delay=$(echo $params | awk '{print $5}')
        umc_count=$(echo $params | awk '{print $6}')
        umc_params=$(echo $params | awk '{$1=$2=$3=$4=$5=$6=""; print $0}' | awk '{$1=$1;print}')

        # umc params may not be always set
        if [ "$umc_params" = "" ]; then umc_params="n/a"; fi

        # running time and start time of this umc instance
        running_time=$(ps -p $pid -o etime= | tr -d ' ')
        start_time=$(ps -p $pid -o lstart | grep -v "STARTED" | awk '{
            cmd="date -d\""$1 FS $2 FS $3 FS $4 FS $5"\" +\047%Y-%m-%d %H:%M:%S\047";
            cmd | getline d; close(cmd); $1=$2=$3=$4=$5=""; printf "%s\n",d$0 }')

        # this will sum up all cpu times of all processes in the gpid
        cputime=$(ps axf -o pgid,cputime | awk -v gpid=$gpid '{if ($1==gpid) print $2}' | gawk '{ match($1,"([0-9]+):([0-9]+):([0-9]+)", m);
            cputime+=m[3]+m[2]*60+m[1]*60*60} END {printf "%02d:%02d:%02d\n",int(cputime/3600),int(cputime%3600/60),cputime%60}')

        # count files in the backlog - i.e. files that still need to be pushed to the remote destination
        # max files in backlog to show, not to wait too much time to count them
        showMaxFilesCount=100
        
        # count number of files        
        backlog_files=$(ls -U $UMC_LOG_DIR/$umc_id/"$umc_id"_* 2>/dev/null | head -$((showMaxFilesCount+1)) | wc -l)
        if [ "$backlog_files" -gt $showMaxFilesCount ]; then 
          backlog_files=">$showMaxFilesCount" 
        fi

        # print all stats
        printstats "$gpid::$umc_id::$time_int::$umc_tool::$umc_delay::$umc_count::$umc_params
          ::$start_time::$running_time::$cputime::$backlog_files"
    done

    exit 0

fi

# *** stop all umc instances on this host
if [ "$cmd" = "--stopall" ]; then
    umcrunner --stats --noheader | awk '{ print $1 }' | \
    while read line; do
        echo "stopping process group $line"
        kill -- -$line
    done

    exit 0
fi

# *** show directory listing of the umc instance
if [ "$cmd" = "--ls" ]; then
    # command parameters
    umc_id=$1 && shift

    echo "Directory listing of $UMC_LOG_DIR/$umc_id"
    ls -all $UMC_LOG_DIR/$umc_id
    exit 0
fi

# *** show process hierarchy of a umc instance
if [ "$cmd" = "--ps" ]; then
    # command parameters
    umc_id=$1 && shift
    gpid=$(umc_gpid_check $umc_id)

    ps axf -eo pid,pgid,cputime,cmd | awk -v w=$(tput cols) -v gpid=$gpid '{if ($2==gpid || NR==1) print substr($0, 1, w)}'

    exit 0
fi

# *** run all umc instances from a definition file
if [ "$cmd" = "--runall" ]; then
    # command parameters
    conf=$1 && shift
    
    if [[ "$1" != "" && "$1" != "--verbose" ]]; then
      echo >&2 "Invalid value for verbose parameter. Type --help for more information."
      exit 1
    else
      if [ "$1" = "--verbose" ]; then verbose=true; else verbose=false; fi      
    fi

    # be verbose
    $verbose && echo "$(date): --runall $conf"    

    # if conf cannot be found, try to find it in the umc/bin directroy
    if [ ! -f $conf ]; then
        oconf=$conf
        conf=$scriptDir/$conf;
        if [ ! -f $conf ]; then
            echo >&2 "$(date): The definition file $oconf cannot be found!"
            exit 1
        fi
    fi
    
    # stop any metric that is running on this host but it does not exist in the conf file
    # this is to ensure that any deleted or commented umc configuration will be stopped 
    umcrunner --stats --noheader | \
    while read line; do 
        umc_id=$(echo $line | awk '{ print $2 }')
        if [ "$(cat $conf | grep "^umc-$umc_id:" | wc -l)" -eq 0 ]; then
          $verbose && echo "$(date): $umc_id is running but does not exist in the definition file, stopping..."
          umcrunner --stop $umc_id
        fi
    done
    
    # start or stop all umc definitions from the conf file by using umcrunner
    cat $conf | egrep -o "^umc-.+" | \
    while read key; do
      # get the umc id from the key
      umc_id=$(echo $key | gawk '{ match($1,"umc-([a-zA-Z0-9\\._]+):", m); print m[1]}')

      # check this is a valid umc id key
      if [ "$umc_id" = "" ]; then
        echo >&2 "$(date): The key $key is not a valid key for UMC identifier!"
        exit 1
      fi
      
      # strip the colon at the end of the key
      key=$(echo $key | cut -d ":" -f 1)
      
      # check if this metric is for this host
      hosts=$($scriptDir/getCfg.py $conf $key::umcrunner::hosts ::)
      
      # be verbose
      $verbose && echo "$(date): processing $umc_id, key=$key"
      
      # start or stop umc as per the definition
      # it should be running only if it is enabled and this host is listed among hosts otherwise it should be stopped
      if [[ "$hosts" != "" && "$($scriptDir/getCfg.py $conf $key::enabled ::)" == "True" && \
         (( "$hosts" == "_ALL_" || $hosts =~ (^|,)"[ ]*$HOSTNAME[ ]*"(,|$) )) ]]; then
        # get umc params
        params=$($scriptDir/getCfg.py $conf $key::umcrunner::params ::)
        
        # check if the params has changed when compared to the currently running umc instnace
        if [ "$(umc_gpid $umc_id)" != "" ]; then
          # get current parameters of running umc
          curparams=$(ps ax | grep -v "grep" | grep "umcrunner --run $umc_id" | gawk '{ match($0,".*--run (.+)", m); print m[1]}')
          
          # stop the umc instance if params has changed
          if [ "$curparams" != "$umc_id $params" ]; then
            $verbose && echo "$(date): $umc_id is running and its parameters changed in the definition file, stopping..."
            umcrunner --stop $umc_id
            sleep 0.5
          fi
        fi
        
        if [ "$(umc_gpid $umc_id)" = "" ]; then        
          # be verbose
          $verbose && echo "$(date): starting $umc_id..."

          # start the umc instnace; expand all variables in params should there be any
          setsid umcrunner --run $umc_id $(eval echo "$params")
        fi
        
        # check for errors
        if [ "$?" -ne 0 ]; then
          echo >&2 "$(date): There was a problem with umc configuration $key in $conf!"
        fi
             
      else
        # should not be running on this host; stop it if it is running
        if [ "$(umc_gpid $umc_id)" != "" ]; then
          $verbose && echo "$(date): $umc_id should not be running on this host, stopping..."
          umcrunner --stop $umc_id
        fi
      fi
      
    done
    
    exit 0
fi

# *** show help
if [ "$cmd" = "--help" ]; then
    print_usage
    exit 0
fi

# not a recognized command
if [ "$cmd" = "" ]; then
    echo >&2 "Specify a valid umcrunner command!"
else
    echo >&2 "$cmd is not recognized as a valid umcrunner command!"
fi

echo >&2 "Run umcrunner --help for more information."
exit 1
