#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# umcrunnerd - umcrunner client
# 09-2018, Tomas Vitvar, tomas@vitvar.com

import os
import sys
import requests
import requests
import yaml
import datetime
import socket
import time
import argparse
import re
import json
import select
import utils

import messages as Msg

from time import sleep
from datetime import datetime, timedelta
from json2table import Table
from utils import PathDef

# local libraries
import messages as Msg
from umcconfig import UmcConfig
from umcrunner import UmcRunner

# global variables
args=None
server_list=None
connect_str=None

# *** formatting functions
def format_state(cdef, value, entry):
    return "1" if value is True else "0"    

def format_time(cdef, value, entry):
    return "-" if value is None or value==0 else time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(float(value)))    

def format_float(cdef, value, entry):
    return "%.2f"%value

def format_float3(cdef, value, entry):
    return "%.3f"%value

def format_uptime(cdef, value, entry):
    t=int(value)
    day=t//86400
    hour=(t-(day*86400))//3600
    minute=(t - ((day*86400) + (hour*3600)))//60
    second=t - ((day*86400) + (hour*3600) + (minute*60))    
    return "%.2d:%.2d:%.2d:%.2d" % (day, hour, minute, second)
    
def format_runs(cdef, value, entry):
    return "%s/%s"%(entry["num_runs"],entry["num_errors"])

def format_returncode(cdef, value, entry):
    return value[0][1] if len(value)>0 else "-"

def format_cedrwe(cdef, value, entry):
    return '/'.join(["%.2d"%int(v) for v in value.split('/')])

def format_cpuload(cdef, value, entry):
    return "%.4f"%(entry["cpu"]/entry["uptime"])

# resource table definition
stats_umcrunner = [
    { "name" : "HOST",        "mlen" : 0,  "value" : "{hostname}",                                          "help" : "umcrunner hostname" }, 
    { "name" : "UPT",         "mlen" : 0,  "value" : "{uptime}",             "format" : format_uptime,      "help" : "umcrunner uptime" }, 
    { "name" : "RSS",         "mlen" : 0,  "value" : "{rss}",                "format" : format_float,       "help" : "Amount of memory in MBs" }, 
    { "name" : "CPU",         "mlen" : 0,  "value" : "{cpu_s}",              "format" : format_float3,      "help" : "CPU load (cpu time/uptime)" }, 
    { "name" : "THR",         "mlen" : 0,  "value" : "{threads}",                                           "help" : "Number of threads" }, 
    { "name" : "CN/EN/DI/RN/WT/ER", "mlen" : 0,  "value" : "{umc_counts.count}/{umc_counts.enabled}/{umc_counts.disabled}/{umc_counts.running}/{umc_counts.waiting}/{umc_counts.errors}",   
                                                                             "format" : format_cedrwe,      "help" : "umc instances counts, CN=total, EN=enabled, DI=disabled, RN=running, WT=waiting, ER=errors" }, 
    { "name" : "U_CHP",       "mlen" : 0,  "value" : "{umc_counts.num_children}",                           "help" : "Number of umc instances children processes" }, 
    { "name" : "U_RSS",       "mlen" : 0,  "value" : "{umc_counts.rss}",     "format" : format_float,       "help" : "Total amount of memory in MBs of all umc instances." }, 
    { "name" : "U_CPU",       "mlen" : 0,  "value" : "{umc_counts.cpu_s}",   "format" : format_float3,      "help" : "CPU load (cpu time/uptime) of all umc instances." }, 
    { "name" : "BLG",         "mlen" : 0,  "value" : "{umc_counts.backlog_total}",                          "help" : "Total backlog of all umcrunner instances." }, 
    { "name" : "LAST_ERROR",  "mlen" : 0,  "value" : "{umc_counts.last_errortime}","format" : format_time , "help" : "Last time an error occurred." }
]

stats_umc = [
    { "name" : "HOST/ID",     "mlen" : 0,  "value" : "{hostname}/{umc_instanceid}",                         "help" : "umc instance ID" }, 
    { "name" : "STT",         "mlen" : 0,  "value" : "{enabled}",            "format" : format_state,       "help" : "Current state, 1=enabled, 0=disabled"}, 
    { "name" : "ROT-DEL-CNT", "mlen" : 0,  "value" : "{rotation_timelimit}-{delay}-{count}",                "help" : "Log rotation time/delay/count." }, 
    { "name" : "RNS/ERS",     "mlen" : 0,  "value" : "{num_runs}/{num_errors}",                             "help" : "Number of total iterations and failed iterations." }, 
    { "name" : "STARTED",     "mlen" : 0,  "value" : "{last_started_time}",  "format" : format_time,        "help" : "Last time umc instance was started." },
    { "name" : "P_CHP",       "mlen" : 0,  "value" : "{stats.p.num_chproc}",                                "help" : "Number of children processes." }, 
    { "name" : "P_RSS",       "mlen" : 0,  "value" : "{stats.p.rss}",        "format" : format_float,       "help" : "Total amount of memory in MBs umc instance currently takes." }, 
    { "name" : "P_CPU",       "mlen" : 0,  "value" : "{stats.p.cpu}",        "format" : format_float,       "help" : "CPU time of the running umc instance." }, 
    { "name" : "P_UPT",       "mlen" : 0,  "value" : "{stats.p.uptime}",     "format" : format_uptime,      "help" : "The time the current umc instance is running." },
    { "name" : "BLG",         "mlen" : 0,  "value" : "{log_stats.backlog_total}",                           "help" : "Total backlog." }, 
    { "name" : "LRC",         "mlen" : 0,  "value" : "{returncodes}",        "format" : format_returncode , "help" : "Last return code." },
    { "name" : "LAST_ERROR",  "mlen" : 0,  "value" : "{lasterror_time}",     "format" : format_time ,       "help" : "Last time an error occurred." }
]

rules_umc = [
    { "rule" : "{stats.p.uptime} > ({delay}*{count})", "type" : "warning", "msg" : "umc instance {umc_instanceid} on {hostname} is running longer than it should!" }
]

# resource definitions
resources = {
    "hosts" : { "url" : "/stats/hosts/{hostname}", "table_def" : stats_umcrunner, "rules_def" : rules_umc, 
        "help" : "umcrunner runtime information" }, 
    "umc" : { "url" : "/stats/hosts/{hostname}/umc/{umc}", "table_def" : stats_umc, 
        "help" : "umc instances configuration and runtime information" } 
}

# commands definitions
commands = {
    "terminate" : { 
        "url" : "/terminate/hosts/{hostname}/umc/{terminate}", "confirm" : True, 
        "q" : "This will terminate umc instances '{terminate}' on {hostname} host(s)!", 
        "help" : "terminate umc instance" },
    "disable" : { 
        "url" : "/disable/hosts/{hostname}/umc/{disable}", "confirm" : True, 
        "q" : "This will disable and terminate umc instances '{disable}' on {hostname} host(s)!", 
        "help" : "disable and terminate umc instance; note that this change is not persistent." },
    "enable" : { 
        "url" : "/enable/hosts/{hostname}/umc/{enable}", "confirm" : True, 
        "q" : "This will enable umc instances '{enable}' on {hostname} host(s)!", 
        "help" : "enable umc instance; note that this change is not persistent." },
    "stop" : { 
        "url" : "/stop/hosts/{hostname}", "confirm" : True, 
        "q" : "This will stop umcrunner on {hostname} host(s)!", 
        "help" : "stop umcrunner." }
}

# send request
def send_request(method, url):
    global connect_str
    if connect_str is None:
        # prefer connect on the command line
        if args.connect is not None:
            connect_str=args.connect 
        
        # get connect from the configuration
        if server_list is not None:
            for hostname,sdef in server_list.items():
                if sdef.me:
                    connect_str="%s:%s"%(sdef.address,sdef.tcp_port)
                    sdef.discarded=True
                    break
        
        # fallback to the local connect
        if connect_str is None:
            connect_str="%s:%s"%(socket.gethostname(),1989)
    
    while True:
        response = None
        try:
            furl='http://%s%s'%(connect_str, url)    
            if method=="get":
                response=requests.get(furl, timeout=(args.connect_timeout, args.read_timeout), allow_redirects=True)
            elif method=="post":
                response=requests.post(furl, timeout=(args.connect_timeout, args.read_timeout), allow_redirects=True)
            else: raise Exception("Fatal: the method %s is not supported!"%method)
            return response
        except requests.exceptions.ConnectionError as e:
            old_connect_str=connect_str
            connect_str=None
            
            # only try the next server if this request was not redirected already
            # in which case, the final destination server cannot be connected to
            if response is None or response.history is not None: 
                if server_list is not None:
                    for hostname,sdef in server_list.items():
                        if sdef.discarded is None:
                            connect_str="%s:%s"%(sdef.address,sdef.tcp_port)
                            sdef.discarded=True
                            break
            
            # raise error if all options tried out
            if connect_str is None:
                connect_str=old_connect_str
                raise e 
        # // except
    # // while
# // send_request

# *** MAIN
if __name__ == "__main__":    

    # arguments
    parser = argparse.ArgumentParser(description='umcrunner client - provides access to umcrunner daemon in the cluster by using umcrunner daemon REST API.', add_help=False)
    conopts = parser.add_argument_group('optional connection arguments')    
    conopts.add_argument('--connect', required=False, default=None, help='umcrunner daemon host nad port to connect; by default will connect to this host ip on tcp/1989',metavar="<host:port>")
    conopts.add_argument('--connect-timeout', required=False, default=0.5, help='HTTP connection timeout, default=0.5s',metavar="<timeout>")
    conopts.add_argument('--read-timeout', required=False, default=10, help='HTTP read timeout, default=10s',metavar="<timeout>")
    
    group=parser.add_argument_group("statistics and commands")
    statcom = group.add_mutually_exclusive_group(required=True)    
    statcom.add_argument('-s','--stats', required=False, metavar="hosts|umc", dest='resource',const='hosts',action='store',nargs='?',type=str,
        help='resource stats to retrieve, default="hosts"')    
    statcom.add_argument('-t','--terminate', metavar="<umc>", required=False, default=None, action='store',help='terminate umc instance')
    statcom.add_argument('-d','--disable', metavar="<umc>", required=False, default=None, action='store',help='disable and terminate umc instance; this operation is not persistent')
    statcom.add_argument('-e','--enable', metavar="<umc>", required=False, default=None, action='store',help='enable umc instance; this operation is not persistent')
    statcom.add_argument('--stop', required=False, default=None, action='store_true',help='stop umcrunner daemon')
    
    prmopts = parser.add_argument_group('statistics and commands options')    
    prmopts.add_argument('-h','--hostname', required=False, metavar="<name>", default='all',action='store',type=str,
        help='run request on a host, default="all"')
    prmopts.add_argument('-u','--umc', required=False, metavar="<id>", default='all',action='store',type=str,
        help='retrieve umc instance id <id>, default="all"')

    srtopts = parser.add_argument_group('sorting options')    
    srtopts.add_argument('--sort', required=False, metavar="<col1,col2,...>", default=None,action='store',type=str,
        help='sort by listed columns')
    srtopts.add_argument('-r','--reverse', required=False, default=False, help='sort in reverse order',action='store_true')    
    
    fmtopts = parser.add_argument_group('output format and display options')    
    fmtopts.add_argument('-f','--format', required=False, metavar="<text|json>", default="text", help='output format, default=text', action='store', type=str) 
    fmtopts.add_argument('--noterm', required=False, help='do not detect terminal dimensions',action='store_true')    
    fmtopts.add_argument('--cont', required=False, default=False, action='store_true',help='display stats continuosly')
    fmtopts.add_argument('--refresh', required=False, metavar="<interval>", default=5, action='store',type=int,help='refresh interval for continuous display of stats')
    
    otopts = parser.add_argument_group('other options')
    otopts.add_argument("--help", action="help", help="show this help message and exit")
    otopts.add_argument('--describe', required=False, help='describe resource structure',action='store_true')     
    otopts.add_argument('--yes', required=False, default=False, help='answer all questions as \'yes\'',action='store_true')    
    otopts.add_argument('--verbose', required=False, help='be verbose',action='store_true')
    args=parser.parse_args()
    Msg.verbose = args.verbose

    try:
        # list of servers that umcrunner could connect to
        server_list = UmcRunner(UmcConfig()).serverlist()

        # get the command to run, if any
        command_def=None
        for cmd,cmd_def in commands.items():
            if vars(args).get(cmd) is not None:
                command_def = cmd_def
                break
        
        # run the command
        if command_def is not None:
            if not(command_def["confirm"]) or args.yes or utils.query_yes_no(utils.unpack(vars(args),command_def["q"]) + " Are you sure?"):
                response=send_request("post", utils.unpack(vars(args),command_def["url"]))
                m = response.json()
                if args.format=="text":                    
                    for x in m:
                        if x.get("msg") is not None:
                            sys.stdout.write("- %s\n"%x["msg"])
                        else:
                            sys.stderr.write("- <unknown message format>\n")
                else:                        
                    sys.stdout.write("%s\n"%json.dumps(response.json(), indent=2))
            
            sys.exit(0)            
        # // command
                
        # print statistics for chosen resource
        rdef = resources.get(args.resource)
        if rdef is not None:
            table = Table(rdef["table_def"], args.sort, args.reverse)
            if args.describe:
                sys.stdout.write("%s (URL=%s).\n\n"%(rdef["help"],rdef["url"]))
                table.describe(args.noterm)
            else:
                while True:
                    response=send_request("get", utils.unpack(vars(args),rdef["url"]))
                    response.raise_for_status()
                    
                    if args.cont and args.format=="text": os.system('clear')

                    if args.format=="text":                    
                        table.display(response.json(), args.noterm)
                    else:                        
                        sys.stdout.write("%s\n"%json.dumps(response.json(), indent=2))
                        
                    if args.cont and args.format=="text":
                        sleep(args.refresh)
                    else:
                        break;
                # // while                    
        else:
            raise Exception("Unknown resource: %s"%args.resource)
        
        print ""
        
    except KeyboardInterrupt as e:
        print ""
        pass
    except requests.exceptions.ReadTimeout as e:
        sys.stderr.write("Read timeout occured when sending the request.\n\n")        
    except requests.exceptions.ConnectTimeout as e:
        sys.stderr.write("Connect timeout occured when sending the request.\n\n")        
    except requests.exceptions.ConnectionError as e:
        sys.stderr.write("Unable to connect: %s\n\n"%connect_str)                
    except Exception as e:
        sys.stderr.write("%s\n\n"%str(e))
        

    
