#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# dms-collector - a tool to retrieve dms table values from dms spy application on 
# defined intervals and convert them to csv format.
# 
# 08-2018, Tomas Vitvar, tomas@vitvar.com

# todo: 
# - reset DMS flag

import os
import signal
import argparse
import re
import requests
import sys, traceback
import time
import datetime
import xml.etree.ElementTree as ET
import errno

from time import sleep, strftime

from requests.exceptions import *

# version info
VERSION="1.1"
TBML_VERSIONS=["11.0"]

# DMS REQESTS URLs
# before changing the urls below check their param bindings as per their usage
DMSREQUEST_HEADER="%s/dms/Spy?format=xml&table=%s&description=true&value=false"
DMSREQUEST_DATA="%s/dms/Spy?format=xml&table=%s&value=true&cached=false"
DMSREQUEST_RESET="%s/dms/Spy?operation=reset&format=raw&cache=refreshall&name=%s&recurse=%s"
DMSLOGIN_URL="%s/dms/j_security_check"

# timeout to read data from dms spy
TIMEOUT_CONNECT=3.05
TIMEOUT_READ=30

# time between two consecutive dms resets
# a warning will only be generated when this time will be exceeded
DMSRESET_MINTIME=20

# default name for the named pipe for event communication
# can be changed by --namedpipe argument
EVENTS_PIPENAME="/tmp/dms-collector-events"

# maximum buffer size that will be read from the pipe at once
EVENTS_BUFFERSIZE=1024

# input arguments
args=None
username=None
password=None
logincookie=None # cookie used for login using login form 

# messages colors
class bcolors:
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    
# messages types
MSG_INFO  = "INF"
MSG_ERROR = "ERR"
MSG_WARN  = "WRN"
    
# *** print info message
def write_msg(type, msg):
    # colors
    out_color = ''; end_color_out = ''
    error_color=bcolors.FAIL; end_color_error = bcolors.ENDC
    if type == MSG_ERROR and sys.stderr.isatty():
        out_color = bcolors.FAIL; end_color_out = bcolors.ENDC
    if type == MSG_WARN and sys.stderr.isatty():
        out_color = bcolors.WARNING; end_color_out = bcolors.ENDC

    # only write info messages in verbose mode
    if ((args.verbose) and type == MSG_INFO) or type == MSG_ERROR or type == MSG_WARN:
        # write the message to out stream
        sys.stderr.write("[" + str(datetime.datetime.now()) + "]-" + type + ":" + out_color + " " + msg + end_color_out + "\n")  
        sys.stderr.flush()
        
def write_info(message):
    write_msg(MSG_INFO, message)

def write_warn(message):
    write_msg(MSG_WARN, message)

def write_error(message):
    write_msg(MSG_ERROR, message)

# normalize header names
def normalize(header):
    if args.origheader == False:
        return header.replace(".","_")
    else:
        return header

# check reg exp pattern and writes error message and exits when it does not match
def checkPattern(str, pattern, errormsg):
    p = re.compile(pattern)
    if not p.match(str):
        raise Exception(errormsg)

# login to Dms by using login form
def DmsLogin():
    headers   = { "User-Agent" : "dms-collector/%s"%VERSION }
    logindata = {"j_username" : username, "j_password" : password, "j_character_encoding" : "UTF-8" }
    r = requests.request("POST",DMSLOGIN_URL%(args.url),headers=headers,data=logindata,allow_redirects=False)
    if r.status_code==302 or r.status_code==303:
        loc=r.headers["Location"] if r.headers.get("Location") is not None else None
        cookie=r.headers["Set-Cookie"] if r.headers.get("Set-Cookie") is not None else None
        if loc is not None and cookie is not None:
            if not("loginForm" in loc):
                # success login
                return cookie
        # // if all headers present
    # // if redirection
    
    # failed login
    return None
# // DmsLogin

# calling dms at url specified 
def callDms(url):
    global logincookie
    write_info("Calling DMS at %s."%url)
    r=None
    if not(args.loginform):
        if username is None:
            r = requests.get(url,timeout=(TIMEOUT_CONNECT, args.readtimeout),allow_redirects=False)
        else:
            r = requests.get(url, auth=(username, password),timeout=(TIMEOUT_CONNECT, args.readtimeout),allow_redirects=False)
        if r.status_code==302 or r.status_code==303:
            raise Exception("It seems that DMS Spy requires login form authentication!")        
        r.raise_for_status()
    else:
        # loginform is set
        logincalled=False
        if logincookie is None:
            logincookie=DmsLogin()
            logincalled=True
        # // login to Dms
        
        if logincookie is not None:
            while True:
                r = requests.get(url,timeout=(TIMEOUT_CONNECT, args.readtimeout),headers={"Cookie" : logincookie },allow_redirects=False)
                if r.status_code!=200 and not(logincalled):
                    # try to login if cookied expired
                    logincookie=DmsLogin()
                    logincalled=True
                    if logincookie is None:
                        break
                else:
                    break
                # // if failure
            # // while
                
            if r.status_code!=200:
                logincookie=None
        # // logincookie 
        
        if logincookie is None:
            raise Exception("DMS request failed, possibly due to a failed login!")
    # // login form
    
    return r
# // callDms

# retrieves data using HTTP get
def retrieveData(url):
    r = callDms(url)

    # remove the default namespace if it exsits
    # dmss spy deployed to wls 12c uses default namespaces in TBML whereas previous version not
    xmlstring=r.text
    xmlstring = re.sub(r'\sxmlns="[^"]+"', '', xmlstring, count=1)
    
    root = ET.fromstring(xmlstring)   
    if not(args.noversioncheck): 
        tbml_version = root.get("version")
        if tbml_version not in TBML_VERSIONS:
            raise Exception("Data retrieved are of not supported tbml version %s. Supported versions are: %s"
                %(tbml_version,','.join(TBML_VERSIONS)))
    return root

# evaluates if str is number (int or float)
def isNumber(str):
    p = re.compile(r'^[\+\-]?[0-9]*(\.[0-9]+)?$')
    return str != '' and p.match(str)    

# chck positive int type for argparser
def check_positive(value):
    ivalue = int(value)
    if ivalue <= 0:
         raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)
    return ivalue

# *** evaluates filter on the row's tags and fields values        
def evalFilter(filter, tags, fields):
    try:
        for k,v in tags.items():
            if v is not None:
                exec(k + "=\"" + v + "\"")
        for k,v in fields.items():
            if v is not None:
                exec(k + "=" + str(v))
        return eval(filter)
    except Exception as e:
        #sys.stderr.write("Error when evaluating the filter '%s': %s!\n" % (filter, e)) 
        return False      

# gets tags and fields from the row
def getTagsFields(row): 
    tags   = { k:str(v).replace('\n', ' ') for k, v in row.items() if not(isNumber(v)) }
    fields = { k:float(v) for k, v in row.items() if isNumber(v) }                            
    return tags, fields
    
def strinquotes(val):
    if args.nostrinquotes or isNumber(val):
        return val
    else:
        return "\"%s\""%val

# emits an event using linux named pipe    
def emitEvent(event):        
    result = False
    try:
        pipeout = os.open(args.namedpipe, os.O_WRONLY | os.O_NONBLOCK)
        try:
            os.write(pipeout, event + "\n"); 
            result = True
        finally:
            os.close(pipeout)
    except OSError as err:
        if err.errno == errno.EAGAIN or err.errno == errno.EWOULDBLOCK or err.errno == errno.ENXIO:
            pass
        else:
            write_error("Error when emitting event: %s"%str(err))
    return result

# read events from a named pipe separated by newline
def readEvents(pipein,timeout):
    if os.path.exists(args.namedpipe):
        buffer = ""
        time_s=time.time()
        while time.time()-time_s < timeout:
            try:
                buf = os.read(pipein, EVENTS_BUFFERSIZE)
            except OSError as err:
                buf = ""
                if err.errno == errno.EAGAIN or err.errno == errno.EWOULDBLOCK:
                    pass
                else:
                    write_error("Error when reading events from the pipe: %s"%str(err))
            
            buffer += buf
            if len(buffer) > 0 and re.match(r'.+\n$',buffer):
                return [x for x in buffer.split("\n") if len(x) > 0]
            sleep(0.5)
        # end while
        
        events=[x for x in buffer.split("\n") if len(x) > 0]
        if len(events) > 0 and not(re.match(r'(.+\n)*.+\n$',buffer)):   
            write_error("An invalid event with no newline received within a timeout of %d seconds: %s"
                %(timeout,events[len(events)-1]))
        return events
    # if
    return []
# readEvents

def openPipeForReading():
    return os.open(args.namedpipe, os.O_RDONLY | os.O_NONBLOCK)

def closePipe(pipehandler):
    if pipehandler is not None:
        try:
            os.close(pipehandler)
        except Exception as e:
            write_error("Error occured when closing the pipe: %s"%str(e))
            
# wait for events to occur
def waitForEvents(pipein):
    thispipe=pipein
    if thispipe is None:
        thispipe = openPipeForReading()
    try:
        # report where we are
        write_info("Events loop, expecting %d event(s) within a timeout of %d seconds."%(args.runonevents,args.maxtime))
            
        # init and start the loop
        numEvents=0
        time_s=0
        while numEvents < args.runonevents and (args.maxtime == 0 or time_s == 0 or time.time()-time_s < args.maxtime):
            events = readEvents(thispipe, 1)
            if len(events)>0:
                write_info("%d event(s) occured: [%s]"%(len(events),";".join(events)))
            numEvents += len(events)

            if numEvents < args.runonevents:
                # report where we are
                write_info("Waiting for event %d out of %d..."%(numEvents+1,args.runonevents))

                # start time to calc the timeout between the first and last events
                if numEvents > 0 and time_s == 0:
                    time_s = time.time()
                    write_info("%d event(s) occurred, there are %d remaining events that should occur within the next %d seconds."
                        %(len(events),args.runonevents-len(events),args.maxtime))
                
                # sleep a bit
                sleep(0.5)
            
        # show warning if not all events occurred
        if numEvents < args.runonevents:
            write_warn("Ended on timeout of %d seconds, %d event(s) occurred which is less than expected %d."
                %(args.maxtime,numEvents,args.runonevents))
        
        # show warning if more events occurred than expected
        if numEvents > args.runonevents:
            write_warn("More events occured (%d) than expected (%s)."%(numEvents,args.runonevents))
                
        # success
        return True
    except Exception as e:
        write_error("Fatal error when waiting for events!")
        traceback.print_exc(file=sys.stdout)
        raise     
    finally:
        if pipein is None:
            closePipe(thispipe)
             
# waitForEvents
    
# *** MAIN
if __name__ == "__main__":   
    pipein=None

    try:
        # arguments
        parser = argparse.ArgumentParser(description='Weblogic DMS Spy table metric collector', add_help=False)
        
        required = parser.add_argument_group('required arguments')
        required.add_argument('--url', required=True, help='Weblogic admin server url where DMS Spy is running',metavar='<url>')
        required.add_argument('--connect', required=False, help='username/password to login to DMS Spy',metavar='<u/p>')        
        required.add_argument('--count', required=True, help='number of runs the data will be retrieved from DMS',metavar='<num>',type=check_positive)

        group1 = parser.add_mutually_exclusive_group(required=True)
        group1.add_argument('--delay', help='delay between runs; positive value is seconds, negative value is minutes',default=0,type=int, metavar='<seconds>|-<minutes>')
        group1.add_argument('--runonevents',help='run when <num> events occur',default=0,metavar='<num>',type=check_positive)

        group2 = parser.add_mutually_exclusive_group(required=True)
        group2.add_argument('--table', help='name of a valid DMS table which data to be retrieved',default=None,metavar='<tablename>')    
        group2.add_argument('--dmsreset',help='reset dms aggregated data for <path>',default=None,metavar='<path>')
        group2.add_argument('--recurse',help='reset dms operation recurse parameter, default is \'all\'',default='all',metavar='<value>')

        ruopts = parser.add_argument_group('optional arguments when --delay argument is used')
        ruopts.add_argument('--nodelayadjust', required=False, help='disables delay time adjustment',default=False,action='store_true')    
        ruopts.add_argument('--secsinmin', required=False, help='a second in a minute to run each iteration when delay value is negative',default=0,type=int,metavar='<secs>')
        ruopts.add_argument('--alignminutes', required=False, help='when delay value is negative then align minutes to the first minute of an hour; this argument is only applied when delay minutes is 2 or greater',default=False,action='store_true')
        ruopts.add_argument('--emitevents', required=False, help='emits an event after each run',default=False,action='store_true')

        reopts = parser.add_argument_group('optional arguments when --runonevents argument is used')
        reopts.add_argument('--maxtime', required=False, help='maximum time in seconds between the first and the last event before the iteration will be triggered, default is 20; set this to 0 to wait indefinitely.',default=20,type=int,metavar='<secs>')    
        reopts.add_argument('--contacceptevents', required=False, help='accept events during the whole running timme; when not set, events will not be accepted during DMS callouts',default=False,action='store_true')    

        fiopts = parser.add_argument_group('optional filtering arguments')
        fiopts.add_argument('--filter', required=False, help='a condition that has to hold true for a row to be included in the output',default='',metavar='<python-expression>')    
        fiopts.add_argument("-ex",'--exclude', required=False, help='list of header fiedls to be excluded from the output',default='',metavar='<field1,field2,...>')    
        fiopts.add_argument("-in",'--include', required=False, help='list of header fiedls to be included in the output (all fields are included by default)',default='',metavar='<field1,field2,...>')    
        
        foopts = parser.add_argument_group('optional formatting arguments')
        foopts.add_argument('--noheader', required=False, help='suppress header in the output',default=False,action='store_true')    
        foopts.add_argument('--origheader', required=False, help='use original header in the output, no normalization',default=False,action='store_true')    
        foopts.add_argument('--timeformat', required=False, help='Python time format for datetime field (default is \'%%y-%%m-%%d %%H:%%M:%%S\')',default="%y-%m-%d %H:%M:%S",metavar='<format>')            
        foopts.add_argument('--datetimefield', required=False, help='datetime header field name (default is \'datetime\')',default="datetime",metavar='<name>')            
        foopts.add_argument('--timezonefield', required=False, help='time zone header field name (default is \'timezone\')',default="timezone",metavar='<name>')            
        foopts.add_argument('--nostrinquotes', required=False, help='do not place string values in quotes',default=False,action='store_true')            
        foopts.add_argument('--fieldstags', required=False, help='print only header\'s fields and tags and exit',default=False,action='store_true')            
        foopts.add_argument('--printheader', required=False, help='print the table header and exit',default=False,action='store_true')    

        otopts = parser.add_argument_group('optional other arguments')
        otopts.add_argument("-h", "--help", action="help", help="show this help message and exit")
        otopts.add_argument("-V", '--version', action='version', version='%(prog)s ' + VERSION + ', supports DMS tbml versions: ' + ','.join(TBML_VERSIONS))
        otopts.add_argument('--verbose', required=False, help='output details to stderr',default=False,action='store_true')
        otopts.add_argument('--noversioncheck', required=False, help='do not check tbml version',default=False,action='store_true')
        otopts.add_argument('--namedpipe', required=False, help='location of a named pipe used to read and write events',default=EVENTS_PIPENAME,metavar='<path>')    
        otopts.add_argument('--readtimeout', required=False, help='htto read timeout, default is %s seconds'%TIMEOUT_READ,type=float,default=TIMEOUT_READ,metavar='<secs>')   
        otopts.add_argument('--loginform', required=False, default=False,action='store_true',help='use login form instead of HTTP basic auth. This is required for newever versions of DMS Spy') 
                    
        args=parser.parse_args()
        
        # parameter checks
        if args.delay != 0 and args.runonevents > 0:
            raise Exception("There cannot be both delay and runonevents defined!")
            
        # TODO: check params for consistency
        # 
        
        # create the named pipe if it does not exist
        if not os.path.exists(args.namedpipe):
            os.mkfifo(args.namedpipe)  
            
        if args.runonevents > 0 and args.contacceptevents:
            pipein = openPipeForReading()
        else:
            pipein = None
                
        # args checks
        checkPattern(args.url, r"^(http:)//([A-Za-z0-9\-\.]+)(:[0-9]+)?$", 
            "The admin url address '%s' is invalid! It should be in a form http(s)://hostname[:port]\n"%args.url)

        # connection information
        if args.connect is not None:
            connect = args.connect.split("/",1)
            username = connect[0]
            if len(connect) > 1:
                password = connect[1]
        exclude = [x.strip() for x in args.exclude.split(',') if x != '' ]
        include = [x.strip() for x in args.include.split(',') if x != '' ]
        
        # check filter expression
        # filter regexp example: bool(re.match(r\"WLS_SOA[0-9]+\",str(ServerName)))
        if args.filter != '':
            try:
                eval(args.filter)
            except Exception as e:
                if re.match(r".*invalid syntax.*", str(e)):
                    raise Exception("The filter '%s' is not a valid python expression (%s)!\n\n"
                        %(args.filter,str(e)))
        
        # diable header when printing fields and tags only
        if args.fieldstags:
            args.noheader = True
            
        # remove trailing space from datatime and timezone fields from command line
        args.datetimefield = args.datetimefield.strip()
        args.timezonefield = args.timezonefield.strip()
                
        # wait for time of the first run if delay is in minutes
        if args.delay < 0:
            write_info("The delay is %d minute(s), calculating time to wake up."%(args.delay*-1))
            
            time_s=time.time()
            secsinmin=time_s-int(time_s/60)*60
            if secsinmin < args.secsinmin and args.delay == -1:
                time_n=time_s+args.secsinmin-secsinmin
            else:
                time_n=int(time_s/60)*60 + args.delay*-60 + args.secsinmin

            # align to the nearest minute
            if args.alignminutes is True and args.delay != -1:
                write_info("The time will be aligned to the next %d-thn minute."%(args.delay*-1))
                time_no=time_n
                time_n=time_no-(int(time_no/60)%(args.delay*-1))*60
                if time_n < time_s:                
                    time_n=time_no+(int(time_no/60)%(args.delay*-1))*60
            
            write_info("Sleeping for %d seconds, will wake up at %s."
                %(time_n-time_s,strftime('%Y-%m-%d %H:%M:%S', time.localtime(time_n))))        
            sleep(time_n-time_s)

        # wait for events to occur
        if args.runonevents > 0:
            waitForEvents(pipein)
                    
        # main loop                
        count = 0
        header = None  
        lastDMSResetTime = None      
        while (count < args.count):
            error = False
            try:
                # number of runs
                count = count + 1
            
                # current time
                stime = time.strftime(args.timeformat, time.localtime())
                tzone = time.strftime('%z')
                
                # current time in seconds for adustement of delay time
                time_s = time.time()
            
                # read table data
                if args.table is not None:        
                    # header
                    if header is None:
                        # report what we are doing
                        write_info("Reading header for table %s"%args.table)
                        
                        # get dms table description
                        root = retrieveData(DMSREQUEST_HEADER%(args.url,args.table))                
                        cdef = root.findall(".//columndef")
                        
                        fields = [normalize(x.get("name")) for x in cdef]
                        fields.insert(0,args.datetimefield)
                        fields.insert(1,args.timezonefield)                        
                        header = ','.join(x for x in fields if (x not in exclude and len(include) == 0) or x in include)

                        # print header
                        if not(args.noheader) or args.printheader:
                            sys.stdout.write(header + "\n")
                            sys.stdout.flush()
                            
                            # only print header and exit
                            if args.printheader:
                                raise SystemExit()
                    # end header

                    # report what we are doing
                    write_info("Reading data for table %s"%args.table)
                
                    # get dms table values
                    root = retrieveData(DMSREQUEST_DATA%(args.url,args.table))
                    
                    # row counters
                    row_count = 0
                    row_count_out = 0
                   
                    # iterate over all rows in the table
                    for rw in root.findall(".//row"):
                        row_count = row_count + 1
                        
                        row={}
                        row[args.datetimefield] = stime
                        row[args.timezonefield] = tzone
                        
                        for cd in cdef:
                            key=normalize(cd.get("name"))
                            cv = rw.find("./column[@name='%s']"%cd.get("name"))
                            if cv is not None and cv.text is not None:
                                if cv.text.strip() != '':
                                    row[key] = cv.text.strip()
                                else:
                                    row[key] = "n/a"   
                            else:
                                row[key] = "n/a"
                        # end for cd
                        
                        # only print fields and tags on the first row and exit
                        if args.fieldstags:
                            tags, fields = getTagsFields(row)
                            print "tags:", ','.join(k for k,v in tags.items() if k in header.split(','))
                            print "fields:", ','.join(k for k,v in fields.items() if k in header.split(','))
                            raise SystemExit()                    
                        
                        # evaluate the filter
                        output_row = True
                        
                        # build tags and fields for this row for filter evaluation
                        if args.filter != '':
                            tags, fields = getTagsFields(row)
                            output_row = evalFilter(args.filter,tags,fields)
                        
                        if output_row is True:
                            r = ','.join(x for x in
                            [strinquotes(row.get(x)) for x in header.split(',')
                            if (x not in exclude and len(include) == 0) or x in include])
                            
                            if len(r) > 0:
                                row_count_out = row_count_out + 1
                                sys.stdout.write(r + "\n")
                                sys.stdout.flush()
                                
                    # end for rw
                    
                    # report where we are
                    write_info("There were %d rows retrieved and %d rows writen out."%(row_count,row_count_out))
                            
                # end read table data
                                
                # dms rest
                else:
                    if lastDMSResetTime is not None and time.time() - lastDMSResetTime < DMSRESET_MINTIME:
                        write_warn("The time between two consecutive DMS resets is too short (%d seconds). Revise your configuration!"
                            %(time.time() - lastDMSResetTime))

                    # report where we are
                    write_info("Resetting dms at '%s'"%args.dmsreset)                    
                    
                    # dms reset operation call
                    try:
                        callDms(DMSREQUEST_RESET%(args.url,args.dmsreset,args.recurse))
                    except Exception as e:
                        write_error("Error occured when reseting DMS at %s"%(DMSREQUEST_RESET%(args.url,args.dmsreset,args.recurse)))
                        raise e
                    
                    # remeber the last time dms reset was called
                    lastDMSResetTime=time.time()

                
            except (ConnectionError, Timeout) as e:
                write_error(str(e))
                error = True
                pass
                    
            # emit event
            if args.emitevents:
                event="table: %s, success: %s, pid: %s, time: %s"%(args.table,not(error),os.getpid(),time.time())
                if emitEvent(event):
                    write_info("Event emitted: %s"%event)
                else:
                    # this is not an error as the event won't be emitted when 
                    # no process is reading from the pipe
                    write_info("Event not emitted: %s"%event)
                    
            if args.runonevents > 0:
                waitForEvents(pipein)
            
            elif count < args.count: # do not wait in the last iteration   
                # use delay to sleep                           
                # the time in seconds it took to retrieve the data
                # disable it when explicitly disabled
                if args.nodelayadjust:
                    elapsed_s = 0
                else:
                    elapsed_s = time.time() - time_s
                    write_info("It took %d seconds to retrieve data, will adjust waiting time accordingly."%elapsed_s)

                # calculate delay
                if args.delay < 0:
                    n=int(time_s/60)*60 + args.delay*-60 + args.secsinmin
                    delay_sec=n-time_s
                else:
                    delay_sec = args.delay

                # check if time adjustment makes sense
                if elapsed_s > delay_sec*0.75:
                    if args.table is not None:
                        msg="retrieve the DMS table '%s'"%args.table
                    else:
                        msg="reset DMS at '%s'"%args.dmsreset
                    write_warn("It took %d seconds to %s which is more than 2/3 of the delay (%d seconds). The time will not be adjusted which in turn will cause the dms collector to run more time!"
                        %(elapsed_s,msg,delay_sec))
                    elapsed_s = 0
                
                # say what we are doing
                write_info("Sleeping for %d seconds, will wake up at %s"
                    %(delay_sec - elapsed_s, strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()+delay_sec-elapsed_s))))
                
                # adjust the delay time and sleep
                sleep(delay_sec - elapsed_s)
            # delay to sleep
        ## end loop
    
        closePipe(pipein)
    
    except (KeyboardInterrupt, SystemExit):
        #write_info("Exiting...")
        closePipe(pipein)
        pass
    except Exception as e:
        closePipe(pipein)
        #write_error(str(e))
        raise

# end main    

