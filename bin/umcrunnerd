#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# umcrunnerd - umcrunner daemon to run umc instances
# 09-2018, Tomas Vitvar, tomas@vitvar.com

import os
import sys
import signal
import datetime
import socket
import time
import argparse
import subprocess 
import psutil
import atexit
import re
import json

from time import sleep
from threading import Event
from subprocess import PIPE

# local libraries
import proc_utils as putils
import messages as Msg
import umctasks as Tasks
from umcconfig import UmcConfig
from umcrunner import UmcRunner
from umchttpd import UmcRunnerHTTPServer
 
# http server
import thread
import threading

# *** constants
VERSION="0.3"

SIGNALS=dict((k, v) for v, k in reversed(sorted(signal.__dict__.items()))
     if v.startswith('SIG') and not v.startswith('SIG_'))

# global umcrunner context 
class GlobalContext():
    config=None             # main configuration object
    homeDir = os.path.dirname(os.path.realpath(__file__))  
    
    umcrunner=None          # umcrunner specific configuration object
    configFile = None       # configuration file
    server_list = None      # list of servers in umcrunner environment
    params = None           # configuration parameters
    umcdefs = None          # umc definitions read from configuration file

    paused = False          # True the loop tasks should be paused    
    exitEvent = Event()     # global exit event, set when exiting umcrunner    
    umcrunner_stats=None    # umcrunner instance statistics
    httpd = None            # httpd server, instance of UmcRunnerHTTPServer
    
# *** helper functions

# resolves hostname to ip address
def resolve(hostname):
    try:
        return socket.gethostbyname(hostname)
    except socket.error:
        return None

# gets a lock using domain sockets to prevent this script from running more than once
def get_lock():
    get_lock._lock_socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    try:
        get_lock._lock_socket.bind('\0umcrunner-magic-yxgfg2dffdghfgfd2dsd45sagfdd')
        return True
    except socket.error:
        return False
            
# signal handler; terminate all child processes on exit        
def signal_quit(signal, frame):
    Msg.warn_msg("Shutting down due to %s (%d)..."%(SIGNALS[signal],signal))
    GlobalContext.exitEvent.set()
        
# *** MAIN
if __name__ == "__main__":    
    # *** arguments
    parser = argparse.ArgumentParser(description='umcrunnerd')
    parser.add_argument('--config', required=False, help='run all umc instances from <file>',metavar='<file>')
    parser.add_argument('--logs', required=False, help='location of umc logs directory',metavar='<dir>')
    parser.add_argument('--verbose', required=False, help='be verbose',action='store_true')
    args=parser.parse_args()
    Msg.verbose = args.verbose
    
    # exit conditions
    # get the lock and exit when already running
    if not(get_lock()):
        sys.stderr.write("Already running!\n")
        sys.exit(1)

    # register signals to quit the process
    for sig in ('TERM', 'HUP', 'INT'):
        signal.signal(getattr(signal, 'SIG'+sig), signal_quit);
    
    # register atexit handler
    atexit.register(putils.terminate_children)    

    # configuration object
    GlobalContext.config=UmcConfig(args.config, args.logs)

    # welcome 
    Msg.info1_msg("umcrunner version %s started with pid %d"%(VERSION, os.getpid()))
    
    # *** main start
    # umc configuration
    GlobalContext.umcrunner=UmcRunner(GlobalContext.config)
    Msg.info1_msg("home_dir=%s, configFile=%s, log_root=%s, hostname=%s"
        %(GlobalContext.homeDir,GlobalContext.config.configFile,GlobalContext.config.logDir,socket.gethostname()))

    # all servers lists
    GlobalContext.server_list = GlobalContext.umcrunner.serverlist()
    Msg.info2_msg("Servers in the cluster: %s"%GlobalContext.server_list)
        
    # load umcrunner params
    GlobalContext.params=GlobalContext.umcrunner.params
    Msg.info2_msg("Parameters: %s"%GlobalContext.params)
    
    # load umc definitions
    GlobalContext.umcdefs = []
    for umcdef in GlobalContext.umcrunner.read_umcdefs():
        GlobalContext.umcdefs.append(umcdef)
    Msg.info1_msg("There are %d umc definitions."%len(GlobalContext.umcdefs))
        
    # http server to handle api requests
    GlobalContext.httpd = UmcRunnerHTTPServer(GlobalContext)
    GlobalContext.httpd.start_httpd()
        
    try:
        # ensure or children processes will share the same process group id 
        # (except the ones that require session ID)
        os.setpgrp()
        
        # all task being run as part of the main loop
        tasks = Tasks.TasksDef(GlobalContext)
        # stats
        tasks.addTask(Tasks.CollectPrcStatsTask, GlobalContext.params.prcstats_interval, run_on_global_pause=True,
            time_limit_pause=2, pause_for=60*5, time_limit_disable=5)
        tasks.addTask(Tasks.CollectLogStatsTask, GlobalContext.params.logstats_interval, run_on_global_pause=False,
            time_limit_pause=10, pause_for=60*10, time_limit_disable=20)
        
        # checks
        tasks.addTask(Tasks.OrphansCheckTask, GlobalContext.params.orphans_interval, run_on_global_pause=True)
        tasks.addTask(Tasks.MaxProcessesTask, GlobalContext.params.maxproc_interval, run_on_global_pause=True)
        tasks.addTask(Tasks.MaxZombiesTask, GlobalContext.params.maxzombies_interval, run_on_global_pause=True)
        
        # run and refresh
        tasks.addTask(Tasks.RefreshProcessesTask, GlobalContext.params.run_interval, run_on_global_pause=True)
        tasks.addTask(Tasks.UmcRunTask, GlobalContext.params.run_interval, run_on_global_pause=False)
            
        # os error attempts
        oserror_retry_attempts = 0
        
        # *** main umcrunner loop
        while not GlobalContext.exitEvent.is_set():
            # run all tasks as per the schedule
            try:
                tasks.run_all()
                
                # reset os error attempts
                oserror_retry_attempts = 0
                
                # wait loop_interval seconds 
                GlobalContext.exitEvent.wait(GlobalContext.params.loop_interval)
            except OSError as e:
                # os error occurred
                oserror_retry_attempts += 1
                Msg.warn_msg("OS error occurred (errno=%d): %s"%(e.errno, str(e)))
                
                # wait for X seconds if attempts allow
                if GlobalContext.params.oserror_max_attempts == -1 or oserror_retry_attempts <= GlobalContext.params.oserror_max_attempts:
                    Msg.warn_msg("Waiting %d seconds, attempt %d..."%(GlobalContext.params.oserror_wait_time, oserror_retry_attempts))
                    GlobalContext.exitEvent.wait(GlobalContext.params.oserror_wait_time)
                else:
                    raise
        # main loop
        
    finally:
        # exiting    
        Msg.info1_msg("umcrunner is about to end.")
        
        # stop httpd
        GlobalContext.httpd.stop_httpd()
    
        